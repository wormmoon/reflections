//When would you want to use a remote repository rather than keeping all your work local?

When you're collaborating with others on projects, or when 
you may need
to be able to reach and edit a project from different 
computers. 

//Why might you want to always pull changes manually 
rather than having Git automatically stay up-to-date with 
your remote repository?

Just in case you've maybe made a change locally that 
conflicts with a change someone else working on the 
project might have made. This is all I can think of
for now!

//Describe the differences between forks, clones, and 
branches. When would you use one instead of another?

Forks: Repositories shared from one GitHub account to
another (all on GitHub servers). Forks are used when 
you want to use someone else's project within GitHub.
It is a public sharing of the files, and as such is able
to be seen by others as 'forked' from the original.

Clones: Repositories shared from a local computer to GitHub
or vice versa. Cloning allows you to push or pull 
repositories from and to you or someone elses computer. 
Used for example if you want to save your rep. from your
computer to GitHub or vice versa. 

Branches: Added to repositories, to allow you to test out
features, or to make a (usually finalised) part of your
project public on GitHub/share it, while keeping other non
finalised parts private on your computer

//What is the benefit of having a copy of the last known state of the 
remote stored locally?

I'm not sure, maybe if you're collaborating with others, it's
useful so you can be up to date with their changes? Also
maybe so you know when you last pushed your changes to the
remote, so you can be aware of the best time to do it next?
Not sure.

//How would you collaborate without using Git or GitHub? 
What would be easier, and what would be harder?

To collaborate without GitHub, I suppose you would have to
send the files back and forth with one another. This would
make it much more difficult for a few reasons: One, 
because GitHub allows you to automatically merge branches
and commits together, or highlights conflicts in a really
easy way for someone to edit and then merge. Without this
feature, someone would have to scroll through and manually
compare both files to see where there were changes OR you'd
have to keep good records of the things you'd both changed
so you could compare. Two, because it stores everything 
online (once you've pushed it there), which means anyone
can see your updates when you make them, from any computer.
Three, because it allows you to make changes and then make
a pull request, requesting that your changes are added to 
the master branch, which someone can then check through to
make sure the changes are ready, and then again, GitHub
does the work for you essentially. I don't know what would
be easier! There must be something... 

//When would you want to make changes in a separate branch 
rather than directly in master? What benefits does each 
approach have?

Making changes in a different branch as opposed to in the
master means that you can make changes that may have errors
in them, or may not be perfect, and commit them without
breaking the code that's in the master branch. This can be
great for when you're collabing with others and you want to
make changes and then share them with others again without 
changing the master branch on GitHub before others have
reviewed it and you all agree the changes are good enough
to be published on the master branch. The benefit of making
changes directly to the master branch is that as soon as 
you've pushed your commits to the master branch on GH, 
others will be able to see your changes, AND it's a lot
cleaner and clearer, as you only have one branch to worry
about. But obvs, if you commit changes that aren't up to
scratch, this is the first thing that anyone will see when
they look at your repo on GitHub, and the new, unreviewed
changes may have broken the master code.